#!/bin/bash

aide(){
	echo "Le script premet de filtrer les donneés d'un fichier, crée un fichier qui contient une liste avec toutes les stations et d'autres inforations (somme des consommateurs etc)"
	echo " $0 <chemin_csv> <type_station> <type_conso> [<id_centrale>][-h]" # les crochets sont utilisés pour dire que largument est optionnel
	echo "Paramètres :"
    	echo "  <chemin_csv>       :  Chemin vers le fichier de données CSV (obligatoire)"
    	echo "  <type_station>     : Type de station à traiter : hvb, hva ou lv (obligatoire)"
    	echo "  <type_conso>       : Type de consommateur à analyser : comp, indiv, all (obligatoire)"
    	echo "Restrictions :"
    	echo "   hvb   \t   : seulement comp (entreprises)"
    	echo "   hva \t   : seulement comp (entreprises)"
    	echo "   lv   \t   : comp, indiv (particuliers) ou all (tous)"
    	echo "  <id_centrale>      : Identifiant de la centrale (optionnel)"
    	echo "Options interdites :"
    	echo " hvb all, hvb indiv, hva all, hva indiv"
    	echo "  -h                 : Affiche cette aide (prioritaire)"
} 

if [[ "$#" -lt 3 || "$*" == *"-h"* ]]; then #si l'option -h est demandé quelque soit l'endroit ou si le nombre d'argument est inferieur a trois 
	aide
	exit 1
fi

chemin_fichier=$1
station=$2
conso=$3
id_centrale=$4

# Validation des paramètres
if [[ ! -f "$chemin_fichier" ]]; then
    echo "Erreur : Le fichier CSV '$chemin_fichier' n'existe pas."
    aide
    echo "temps : 0.0sec"
    exit 2
fi

if [[ "$station" != "hvb" && "$station" != "hva" && "$station" != "lv" ]]; then
    echo "Erreur : La station saisie n'existe pas. Valeurs possibles : hvb, hva, lv."
    aide
    echo "temps : 0.0sec"
    exit 3
fi

if [[ "$conso" != "comp" && "$conso" != "indiv" && "$conso" != "all" ]]; then
    echo "Erreur : Le consommateur saisi n'existe pas. Valeurs possibles : comp, indiv, all."
    aide
    exit 4
fi

# Vérifications des restrictions spécifiques
if [[ "$station" == "hvb" && ( "$conso" == "all" || "$conso" == "indiv" ) ]]; then
    echo "Erreur : Les options 'hvb all' et 'hvb indiv' sont interdites."
    aide
    echo "temps : 0.0sec"
    exit 5
fi
if [[ "$station" == "hva" && ( "$conso" == "all" || "$conso" == "indiv" ) ]]; then
    echo "Erreur : Les options 'hva all' et 'hva indiv' sont interdites."
    aide
    echo "temps : 0.0sec"
    exit 6
fi

# Vérification et création des dossiers temporaires
if [[ -d "tmp" ]]; then
    echo "Le dossier 'tmp' existe déjà. Il sera vidé."
    rm -rf tmp/* # Supprime tout ce qui est à l'intérieur
else
    echo "Le dossier 'tmp' n'existe pas. Création du dossier."
    mkdir -p tmp
fi

if [[ -d "graphs" ]]; then
    echo "Le dossier 'graphs' existe déjà."
else
    echo "Le dossier 'graphs' n'existe pas. Création du dossier."
    mkdir -p graphs
fi

# Vérification de l'exécutable C
executable="./C-Wire_pg" 
if [[ ! -f "$executable" ]]; then
    echo "Compilation du programme C..."
    make -C C-Wire
    if [[ $? -ne 0 ]]; then
        echo "Erreur : Échec de la compilation du programme C."
        echo "temps : 0.0sec"
        exit 7
    fi
fi

# Fonction pour mesurer le temps
measure_time() {
    local start_time=$(date +%s.%N)
    "$@"
    local end_time=$(date +%s.%N)
    local elapsed_time=$(awk "BEGIN {print $end_time - $start_time}")
    printf "Temps d'exécution : %.3f sec\n" "$elapsed_time"
}

# Fonction de filtrage
filter_and_copy_data() {
    local input_file="$1"
    local station_type="$2"
    local consumer_type="$3"
    local central_id="$4"
    local output_file="tmp/filtered_data.dat"

    echo "Filtrage des données en fonction du type de station, du type de consommateur et de l'ID de la centrale..."

    local station_index consumer_index
    case "$station_type" in
        hvb) station_index=2 ;;
        hva) station_index=3 ;;
        lv) station_index=4 ;;
    esac

    case "$consumer_type" in
        comp) consumer_index=5 ;;
        indiv) consumer_index=6 ;;
        all) consumer_index="all" ;;
    esac

    if [[ "$consumer_index" == 5 ]]; then
        local no_consumer=6
    else
        local no_consumer=5
    fi

    awk -v station_idx=$station_index -v cons_idx=$consumer_index -v no_cons_idx=$no_consumer -v central_id=$central_id \
    'BEGIN { FS=","; OFS="," } \
    NR==1 || ($station_idx == central_id && $cons_idx != "") { print $0 }' $input_file > $output_file

    echo "Données filtrées copiées dans : $output_file"
}

# Mesurer et exécuter le filtrage
measure_time filter_and_copy_data "$chemin_fichier" "$station" "$conso" "$id_centrale"
